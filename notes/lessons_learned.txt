Lessons Learned

Instance IDs are apparently stored as reals, but you can reference properties of them
using dot notation in code? And you can declare a variable in the IDE as a real and yet
set it to "noone". Typing seems very loose in the IDE, although the documentation does
talk about several distinct types under the hood.

When drawing object sprites to GUI layer, the object's collision (and therefore mouse/touch)
input box still exists at its world coordinates. So if you change the camera such that 
cameraX or cameraY coordinates no longer match world x/y coordinates, a click on the object's
visual in the GUI won't register as a click on the object in the room. So it's just so easy
to just draw objects on the GUI and have clickable GUI elements.

If you click the screen, it will transfer the click event not only to the object on top of
the display list when you click (i.e. what you think you clicked) but also to everything
that might be under it in the display list. So if two objects are stacked on top of each
other, and you click the top one (even if it's the only one you can see), both objects will
run their click events.

Renaming resources in the resource tree will change child/parent relationships and other 
things managed by the IDE, but will not change everything. For instance, if you have an
object reference that you're using to dot-access a variable in code, that won't be fixed.

Regarding the point above, don't use dot-accesors on objects if using DnD. Just make the
thing relative to the object you're interested in where possible, because it will allow
the rename refactoring to work better.

A layer element is not the same as an instance. Layer elements returned from the various
layer functions must be converted to instances before being used as such.

The other keyword, when used inside a "with" block, refers to the calling context. So no
more setting up temp variables to hold the id of an instance before calling with inside it.

Programatically-created paths default to closed. Path node speed factor is calibrated for
a value of 100 (i.e. the path_speed will move that number of pixels per step if path nodes
have a speed factor of 100).